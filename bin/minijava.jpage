
Trabalho 3 - Análise Semântica de MiniJava
==========================================

O terceiro trabalho é completar o analisador de escopo e tipos para
a linguagem MiniJava (http://www.dcc.ufrj.br/~fabiom/comp/minijava.html).
Essa pasta contém o esqueleto do analisador, dentro as classes no pacote
"minijava.ast".

As regras de escopo e tipos de MiniJava seguem as de Java, dadas
as simplificações que foram feitas para obter a gramática de MiniJava.

As regras do sistema de tipos se baseiam na *compatibilidade* entre dois
tipos. O tipo t1 é compatível com t2 se eles são iguais ou se t1 e t2
são classes declaradas no programa e t1 é subclasse de t2. A função
Tipo.compativel testa a compatibilidade entre dois tipos e lança uma
exceção caso não sejam.

As partes que estão faltando correspondem à tipagem de algumas expressões,
à implementação da relação "subClasseDe" em "Classe.java" e à implementação da
inicialização da declaração de campos, também em "Classe.java". Vejam os comentários
em "Classe.java", "Chamada.java", "Campo.java" e "Indexa.java" para
instruções do que falta ser implementado.

Caso o programa esteja correto a análise não produz nenhuma saída,
caso o programa tenha erros a análise gera uma exceção com uma mensagem
descrevendo o erro (dando a linha no arquivo fonte onde ele aconteceu).

Abaixo estão trechos de código que executam o analisador em
alguns casos de teste:

java.io.FileReader f = new java.io.FileReader("factorial.java");
minijava.Parser parser = new minijava.Parser(f);
parser.parse();
parser.saida.tipos();

java.io.FileReader f = new java.io.FileReader("binarysearch.java");
minijava.Parser parser = new minijava.Parser(f);
parser.parse();
parser.saida.tipos();

java.io.FileReader f = new java.io.FileReader("bubblesort.java");
minijava.Parser parser = new minijava.Parser(f);
parser.parse();
parser.saida.tipos();

java.io.FileReader f = new java.io.FileReader("treevisitor.java");
minijava.Parser parser = new minijava.Parser(f);
parser.parse();
parser.saida.tipos();
